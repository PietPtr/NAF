/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.5. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module main
    ( // Inputs
      input  clock // clock
    , input  reset // reset
    , input  enable // enable
    , input  udp_rx_valid
    , input  udp_rx_first
    , input  udp_rx_last
    , input [7:0] udp_rx_payload
    , input  udp_rx_last_be
    , input  udp_tx_ready

      // Outputs
    , output wire  udp_rx_ready
    , output wire  udp_tx_valid
    , output wire  udp_tx_first
    , output wire  udp_tx_last
    , output wire [7:0] udp_tx_payload
    );
  reg [10:0] c$app_arg = {1'b0,   1'b0,   1'b0,   8'd0};
  wire [10:0] result;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [7:0] c$ds_app_arg;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [7:0] c$ds_case_alt;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [0:0] c$ds_app_arg_0;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [0:0] c$ds_case_alt_0;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [0:0] c$ds_app_arg_1;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  reg [0:0] c$ds_case_alt_1;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [0:0] c$ds_app_arg_2;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [255:0] c$ds_app_arg_3;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [255:0] v;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [5:0] c$ds_app_arg_4;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [5:0] c$ds_case_alt_2;
  wire [5:0] result_0;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [5:0] c$ds_case_alt_3;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [5:0] c$ds_case_alt_4;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [5:0] c$ds_case_alt_5;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire  ds7;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire  c$ds_case_scrut;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [4:0] n1;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  reg [261:0] ds1 = {{1'b0,5'bxxxxx},   {8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
                     8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
                     8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
                     8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
                     8'd0,   8'd0,   8'd0,   8'd0}};
  // ../clash/Top.hs:(9,1)-(10,84)
  wire [256:0] c$ds_case_alt_6;
  // ../clash/udp/UdpCounters.hs:(30,1)-(31,41)
  reg [31:0] c$ds_app_arg_5 = (32'd0);
  wire [32:0] result_1;
  wire [31:0] c$app_arg_0;
  wire [64:0] c$case_alt;
  // ../clash/udp/UdpCounters.hs:(42,1)-(43,41)
  reg [32:0] c$ds_app_arg_6 = {32'd0,   1'd0};
  wire [32:0] result_2;
  wire [65:0] c$case_alt_0;
  wire [0:0] c$app_arg_1;
  wire [0:0] c$case_alt_1;
  wire [0:0] c$case_alt_2;
  wire [0:0] c$case_alt_3;
  wire [0:0] c$case_alt_4;
  wire [31:0] c$app_arg_2;
  // ../clash/udp/UdpCounters.hs:54:1-15
  wire [0:0] state;
  wire [31:0] c$case_alt_5;
  wire [31:0] c$case_alt_6;
  wire  c$case_scrut;
  // ../clash/udp/UdpCounters.hs:54:1-15
  wire [31:0] payload_counter;
  wire  c$case_scrut_0;
  wire [12:0] udp;
  wire [5:0] c$ds_app_arg_selection_1;
  wire [255:0] c$vecFlat;
  wire [5:0] c$ds_app_arg_selection_4;
  wire [5:0] c$ds_app_arg_selection_7;
  wire [5:0] c$ds_app_arg_selection_10;
  wire [5:0] c$ds_app_arg_selection_14;
  wire [11:0] udp_0;
  wire [10:0] udp_tx;

  assign udp = {{udp_rx_valid,   udp_rx_first,
                 udp_rx_last,   udp_rx_payload,
                 udp_rx_last_be},   udp_tx_ready};

  assign udp_0 = {result_1[32:32] | result_2[32:32],
                  c$app_arg};

  // register begin
  always @(posedge clock or  posedge  reset) begin : c$app_arg_register
    if ( reset) begin
      c$app_arg <= {1'b0,   1'b0,   1'b0,   8'd0};
    end else if (enable) begin
      c$app_arg <= result;
    end
  end
  // register end

  assign result = {(c$ds_app_arg_2),
                   (c$ds_app_arg_1),   (c$ds_app_arg_0),
                   c$ds_app_arg};

  assign c$ds_app_arg_selection_1 = ds1[261:256];

  assign c$ds_app_arg = c$ds_app_arg_selection_1[5:5] ? c$ds_case_alt : 8'b11111111;

  assign c$vecFlat = ds1[255:0];

  // index begin
  wire [7:0] vecArray [0:32-1];
  genvar i;
  generate
  for (i=0; i < 32; i=i+1) begin : mk_array
    assign vecArray[(32-1)-i] = c$vecFlat[i*8+:8];
  end
  endgenerate
  assign c$ds_case_alt = vecArray[($unsigned({{(64-5) {1'b0}},n1}))];
  // index end

  assign c$ds_app_arg_selection_4 = ds1[261:256];

  assign c$ds_app_arg_0 = c$ds_app_arg_selection_4[5:5] ? c$ds_case_alt_0 : 1'b0;

  assign c$ds_case_alt_0 = c$ds_case_scrut ? 1'b1 : 1'b0;

  assign c$ds_app_arg_selection_7 = ds1[261:256];

  assign c$ds_app_arg_1 = c$ds_app_arg_selection_7[5:5] ? c$ds_case_alt_1 : 1'b0;

  always @(*) begin
    case(n1)
      5'd0 : c$ds_case_alt_1 = 1'b1;
      default : c$ds_case_alt_1 = 1'b0;
    endcase
  end

  assign c$ds_app_arg_selection_10 = ds1[261:256];

  assign c$ds_app_arg_2 = c$ds_app_arg_selection_10[5:5] ? 1'b1 : 1'b0;

  assign c$ds_app_arg_3 = c$ds_case_alt_6[256:256] ? v : ds1[255:0];

  assign v = c$ds_case_alt_6[255:0];

  assign c$ds_app_arg_selection_14 = ds1[261:256];

  assign c$ds_app_arg_4 = c$ds_app_arg_selection_14[5:5] ? result_0 : c$ds_case_alt_2;

  assign c$ds_case_alt_2 = c$ds_case_alt_6[256:256] ? {1'b1,5'd0} : {1'b0,5'bxxxxx};

  assign result_0 = c$ds_case_scrut ? c$ds_case_alt_3 : c$ds_case_alt_4;

  assign c$ds_case_alt_3 = ds7 ? {1'b0,5'bxxxxx} : c$ds_case_alt_5;

  assign c$ds_case_alt_4 = ds7 ? {1'b1,n1 + 5'd1} : c$ds_case_alt_5;

  assign c$ds_case_alt_5 = ds7 ? ({6 {1'bx}}) : ds1[261:256];

  assign ds7 = udp[0:0] == 1'b1;

  assign c$ds_case_scrut = n1 == 5'd31;

  assign n1 = ds1[260:256];

  // register begin
  always @(posedge clock or  posedge  reset) begin : ds1_register
    if ( reset) begin
      ds1 <= {{1'b0,5'bxxxxx},   {8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
                       8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
                       8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
                       8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
                       8'd0,   8'd0,   8'd0,   8'd0}};
    end else if (enable) begin
      ds1 <= {c$ds_app_arg_4,   c$ds_app_arg_3};
    end
  end
  // register end

  assign c$ds_case_alt_6 = ((udp[11:11] & udp[12:12]) == 1'b1) ? {1'b1,(({192'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,({((result_1[31:0])),((result_2[31:0]))})}))} : {1'b0,256'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  // register begin
  always @(posedge clock or  posedge  reset) begin : c$ds_app_arg_5_register
    if ( reset) begin
      c$ds_app_arg_5 <= (32'd0);
    end else if (enable) begin
      c$ds_app_arg_5 <= c$case_alt[64:33];
    end
  end
  // register end

  assign result_1 = c$case_alt[32:0];

  assign c$app_arg_0 = ((udp[11:11] & udp[12:12]) == 1'b1) ? (c$ds_app_arg_5 + 32'd1) : c$ds_app_arg_5;

  assign c$case_alt = {c$app_arg_0,   {1'b1,
                                       c$ds_app_arg_5}};

  // register begin
  always @(posedge clock or  posedge  reset) begin : c$ds_app_arg_6_register
    if ( reset) begin
      c$ds_app_arg_6 <= {32'd0,   1'd0};
    end else if (enable) begin
      c$ds_app_arg_6 <= c$case_alt_0[65:33];
    end
  end
  // register end

  assign result_2 = c$case_alt_0[32:0];

  assign c$case_alt_0 = {{c$app_arg_2,
                          c$app_arg_1},   {1'b1,   payload_counter}};

  assign c$app_arg_1 = state ? c$case_alt_1 : c$case_alt_2;

  assign c$case_alt_1 = c$case_scrut_0 ? c$case_alt_3 : 1'd1;

  assign c$case_alt_2 = c$case_scrut_0 ? c$case_alt_4 : 1'd0;

  assign c$case_alt_3 = (udp[10:10] == 1'b1) ? 1'd0 : 1'd1;

  assign c$case_alt_4 = c$case_scrut ? 1'd1 : 1'd0;

  assign c$app_arg_2 = state ? c$case_alt_6 : c$case_alt_5;

  assign state = c$ds_app_arg_6[0:0];

  assign c$case_alt_5 = c$case_scrut ? c$case_alt_6 : payload_counter;

  assign c$case_alt_6 = c$case_scrut_0 ? (payload_counter + 32'd1) : payload_counter;

  assign c$case_scrut = udp[11:11] == 1'b1;

  assign payload_counter = c$ds_app_arg_6[32:1];

  assign c$case_scrut_0 = udp[12:12] == 1'b1;

  assign udp_rx_ready = udp_0[11:11];

  assign udp_tx = udp_0[10:0];

  assign udp_tx_valid = udp_tx[10:10];

  assign udp_tx_first = udp_tx[9:9];

  assign udp_tx_last = udp_tx[8:8];

  assign udp_tx_payload = udp_tx[7:0];


endmodule

