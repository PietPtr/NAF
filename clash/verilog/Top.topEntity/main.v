/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.5. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module main
    ( // Inputs
      input  clock // clock
    , input  reset // reset
    , input  enable // enable
    , input  udp_rx_valid
    , input  udp_rx_first
    , input  udp_rx_last
    , input [7:0] udp_rx_payload
    , input  udp_rx_last_be
    , input  udp_tx_ready

      // Outputs
    , output wire  udp_rx_ready
    , output wire  udp_tx_valid
    , output wire  udp_tx_first
    , output wire  udp_tx_last
    , output wire [7:0] udp_tx_payload
    );
  wire [64:0] result;
  // ../clash/common/Comps.hs:(9,1)-(10,29)
  reg [11:0] counter = 12'd0;
  // ../clash/common/Comps.hs:(9,1)-(10,29)
  wire [11:0] c$counter_app_arg;
  wire [10:0] result_0;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [7:0] c$ds_app_arg;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [7:0] c$ds_case_alt;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [0:0] c$ds_app_arg_0;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [0:0] c$ds_case_alt_0;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [0:0] c$ds_app_arg_1;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  reg [0:0] c$ds_case_alt_1;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [0:0] c$ds_app_arg_2;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [63:0] c$ds_app_arg_3;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [63:0] v;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [3:0] c$ds_app_arg_4;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [3:0] c$ds_case_alt_2;
  wire [3:0] result_1;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [3:0] c$ds_case_alt_3;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [3:0] c$ds_case_alt_4;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [3:0] c$ds_case_alt_5;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire  ds7;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire  c$ds_case_scrut;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  wire [2:0] n1;
  // ../clash/udp/VecAsUdp.hs:(24,1)-(26,28)
  reg [67:0] ds1 = {{1'b0,3'bxxx},   {8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
                   8'd0}};
  reg [10:0] c$app_arg = {1'b0,   1'b0,   1'b0,   8'd0};
  wire [12:0] udp;
  wire [3:0] c$ds_app_arg_selection_1;
  wire [63:0] c$vecFlat;
  wire [3:0] c$ds_app_arg_selection_4;
  wire [3:0] c$ds_app_arg_selection_7;
  wire [3:0] c$ds_app_arg_selection_10;
  wire [3:0] c$ds_app_arg_selection_14;
  wire [11:0] udp_0;
  wire [10:0] udp_tx;

  assign udp = {{udp_rx_valid,   udp_rx_first,
                 udp_rx_last,   udp_rx_payload,
                 udp_rx_last_be},   udp_tx_ready};

  assign result = (counter == 12'd0) ? {1'b1,{8'b11011110,
                                              8'b10101101,   8'b10111110,   8'b11101111,
                                              8'b00000000,   8'b10101011,   8'b11001001,
                                              8'b11101110}} : {1'b0,64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  // register begin
  always @(posedge clock or  posedge  reset) begin : counter_register
    if ( reset) begin
      counter <= 12'd0;
    end else if (enable) begin
      counter <= c$counter_app_arg;
    end
  end
  // register end

  assign c$counter_app_arg = (counter == 12'd4095) ? 12'd0 : (counter + 12'd1);

  assign result_0 = {(c$ds_app_arg_2),
                     (c$ds_app_arg_1),   (c$ds_app_arg_0),
                     c$ds_app_arg};

  assign c$ds_app_arg_selection_1 = ds1[67:64];

  assign c$ds_app_arg = c$ds_app_arg_selection_1[3:3] ? c$ds_case_alt : 8'b11111111;

  assign c$vecFlat = ds1[63:0];

  // index begin
  wire [7:0] vecArray [0:8-1];
  genvar i;
  generate
  for (i=0; i < 8; i=i+1) begin : mk_array
    assign vecArray[(8-1)-i] = c$vecFlat[i*8+:8];
  end
  endgenerate
  assign c$ds_case_alt = vecArray[($unsigned({{(64-3) {1'b0}},n1}))];
  // index end

  assign c$ds_app_arg_selection_4 = ds1[67:64];

  assign c$ds_app_arg_0 = c$ds_app_arg_selection_4[3:3] ? c$ds_case_alt_0 : 1'b0;

  assign c$ds_case_alt_0 = c$ds_case_scrut ? 1'b1 : 1'b0;

  assign c$ds_app_arg_selection_7 = ds1[67:64];

  assign c$ds_app_arg_1 = c$ds_app_arg_selection_7[3:3] ? c$ds_case_alt_1 : 1'b0;

  always @(*) begin
    case(n1)
      3'd0 : c$ds_case_alt_1 = 1'b1;
      default : c$ds_case_alt_1 = 1'b0;
    endcase
  end

  assign c$ds_app_arg_selection_10 = ds1[67:64];

  assign c$ds_app_arg_2 = c$ds_app_arg_selection_10[3:3] ? 1'b1 : 1'b0;

  assign c$ds_app_arg_3 = result[64:64] ? v : ds1[63:0];

  assign v = result[63:0];

  assign c$ds_app_arg_selection_14 = ds1[67:64];

  assign c$ds_app_arg_4 = c$ds_app_arg_selection_14[3:3] ? result_1 : c$ds_case_alt_2;

  assign c$ds_case_alt_2 = result[64:64] ? {1'b1,3'd0} : {1'b0,3'bxxx};

  assign result_1 = c$ds_case_scrut ? c$ds_case_alt_3 : c$ds_case_alt_4;

  assign c$ds_case_alt_3 = ds7 ? {1'b0,3'bxxx} : c$ds_case_alt_5;

  assign c$ds_case_alt_4 = ds7 ? {1'b1,n1 + 3'd1} : c$ds_case_alt_5;

  assign c$ds_case_alt_5 = ds7 ? ({4 {1'bx}}) : ds1[67:64];

  assign ds7 = udp[0:0] == 1'b1;

  assign c$ds_case_scrut = n1 == 3'd7;

  assign n1 = ds1[66:64];

  // register begin
  always @(posedge clock or  posedge  reset) begin : ds1_register
    if ( reset) begin
      ds1 <= {{1'b0,3'bxxx},   {8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
                     8'd0}};
    end else if (enable) begin
      ds1 <= {c$ds_app_arg_4,   c$ds_app_arg_3};
    end
  end
  // register end

  // register begin
  always @(posedge clock or  posedge  reset) begin : c$app_arg_register
    if ( reset) begin
      c$app_arg <= {1'b0,   1'b0,   1'b0,   8'd0};
    end else if (enable) begin
      c$app_arg <= result_0;
    end
  end
  // register end

  assign udp_0 = {1'b1,   c$app_arg};

  assign udp_rx_ready = udp_0[11:11];

  assign udp_tx = udp_0[10:0];

  assign udp_tx_valid = udp_tx[10:10];

  assign udp_tx_first = udp_tx[9:9];

  assign udp_tx_last = udp_tx[8:8];

  assign udp_tx_payload = udp_tx[7:0];


endmodule

